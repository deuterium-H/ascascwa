# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = 'aW1wb3J0IHJlcXVlc3RzCmZyb20gdXJsZXh0cmFjdCBpbXBvcnQgVVJMRXh0cmFjdApzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCmV4dHJhY3RvciA9IFVSTEV4dHJhY3QoKQpkZWYgaW5pdCgpOgogICAgY29va2llcyA9IHsKICAgICdfZ2EnOiAnR0ExLjIuNjY1ODM3NDAxLjE2NjUwNjE2ODEnLAogICAgJ19naWQnOiAnR0ExLjIuMjEwODI5MDQzMi4xNjY1NTg4NjIyJywKICAgICdfX2NmX2JtJzogJzhaMzV5MFZ4bndfc3lzZ3ZheTVHRzZ2aGFkSEJNWjE3LlpKb25kMFFGLkUtMTY2NTU4ODY1My0wLUFVRjZQSEdnQWRDSjJVK2lNaXZKRTU0RWo5VjBsWWlacnErQVU4UktReU1vOEhLNkRjck1mc0wzTENDY1BXbzFyS1VyWkNIYThaVGVBMG0xK2M1RVlZaDk3SVI5YVduU0R4SjVDeEVUTXFGWjdWNjhFNHQxUHNlaXU0THNWdDR3Qmc9PScsCiAgICAnX2dhdCc6ICcxJywKICAgICdYU1JGLVRPS0VOJzogJ2V5SnBkaUk2SW14TU5EaE9hMFY0VVc5MFIxaHFTMWhFYjFkMmQzYzlQU0lzSW5aaGJIVmxJam9pVVVaYVRqbHhTRVp2Y2pFd2JIQkVNSFl2VUhOeGMyWkNOVmhCUkZnNVZGcFFTM1JEYnpkQlltMTZha1V4UzBwMGRrRjRiVWc0Y25sc1ozbHlhMVY2V1hGeGREUXJOMlpVTkc1T1ZEQk9Ua3hYYmt0R1ptRTBWazlZVGs5TFJVcHVZM0l6V2pkWmVVOUtiVGRrUTNKVVN6YzNVemh2YkdGbGJVeE5SWGxLY1RVaUxDSnRZV01pT2lJM016QmpNVGs1WVdJM056QmlZak5sTldZeE9HWXpOalkwTmpoa1kyRmpZMlk1WWpKak5HWTRPRFkzWTJVMllXSXhaVFZrWkdZMk1EWmhOakkxTURBeUlpd2lkR0ZuSWpvaUluMCUzRCcsCiAgICAnZ21haWxuYXRvcl9zZXNzaW9uJzogJ2V5SnBkaUk2SW5FeGVqWjBlVTUzYVVKWVlVUnJkazVXVUZNMVJrRTlQU0lzSW5aaGJIVmxJam9pVml0VWJ6VjNiM3B4ZUVrelYxSnVSMmhuZVdoalFsTjBXRlJFVDBGRk5HOHhUekZzVVdGMVlYUlhiWGxUWkdRMlNtSnNZa1k0TTBObU9EWkNVMWxTYlZGVE9FUnROSFZPYmpCc04yOWlSbkphV21WUmFqbE1TblJuVW14S1drRjJSa3hxV25CdmRETjJXSE54YkdoNk9ESmtOVkZ2Y0ZnNU0zRjNUbnA1Y3pVaUxDSnRZV01pT2lKbU1tTTFPV1UxWTJJeU5UWmtPRFV3TWpRNU9XTmxabVF3TWprNFpEUXdZamszWTJJNU9ESmlNRFprWkRWallUQTVObU14TldGak1XVmpNMk5tTXpCaUlpd2lkR0ZuSWpvaUluMCUzRCcsCn0KCiAgICBoZWFkZXJzID0gewogICAgICAgICdhdXRob3JpdHknOiAnd3d3LmVtYWlsbmF0b3IuY29tJywKICAgICAgICAnYWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsCiAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOSxhcjtxPTAuOCcsCiAgICAgICAgIyBBbHJlYWR5IGFkZGVkIHdoZW4geW91IHBhc3MganNvbj0KICAgICAgICAjICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgIyBSZXF1ZXN0cyBzb3J0cyBjb29raWVzPSBhbHBoYWJldGljYWxseQogICAgICAgICMgJ2Nvb2tpZSc6ICdfZ2E9R0ExLjIuNjY1ODM3NDAxLjE2NjUwNjE2ODE7IF9naWQ9R0ExLjIuMjEwODI5MDQzMi4xNjY1NTg4NjIyOyBfX2NmX2JtPThaMzV5MFZ4bndfc3lzZ3ZheTVHRzZ2aGFkSEJNWjE3LlpKb25kMFFGLkUtMTY2NTU4ODY1My0wLUFVRjZQSEdnQWRDSjJVK2lNaXZKRTU0RWo5VjBsWWlacnErQVU4UktReU1vOEhLNkRjck1mc0wzTENDY1BXbzFyS1VyWkNIYThaVGVBMG0xK2M1RVlZaDk3SVI5YVduU0R4SjVDeEVUTXFGWjdWNjhFNHQxUHNlaXU0THNWdDR3Qmc9PTsgX2dhdD0xOyBYU1JGLVRPS0VOPWV5SnBkaUk2SW14TU5EaE9hMFY0VVc5MFIxaHFTMWhFYjFkMmQzYzlQU0lzSW5aaGJIVmxJam9pVVVaYVRqbHhTRVp2Y2pFd2JIQkVNSFl2VUhOeGMyWkNOVmhCUkZnNVZGcFFTM1JEYnpkQlltMTZha1V4UzBwMGRrRjRiVWc0Y25sc1ozbHlhMVY2V1hGeGREUXJOMlpVTkc1T1ZEQk9Ua3hYYmt0R1ptRTBWazlZVGs5TFJVcHVZM0l6V2pkWmVVOUtiVGRrUTNKVVN6YzNVemh2YkdGbGJVeE5SWGxLY1RVaUxDSnRZV01pT2lJM016QmpNVGs1WVdJM056QmlZak5sTldZeE9HWXpOalkwTmpoa1kyRmpZMlk1WWpKak5HWTRPRFkzWTJVMllXSXhaVFZrWkdZMk1EWmhOakkxTURBeUlpd2lkR0ZuSWpvaUluMCUzRDsgZ21haWxuYXRvcl9zZXNzaW9uPWV5SnBkaUk2SW5FeGVqWjBlVTUzYVVKWVlVUnJkazVXVUZNMVJrRTlQU0lzSW5aaGJIVmxJam9pVml0VWJ6VjNiM3B4ZUVrelYxSnVSMmhuZVdoalFsTjBXRlJFVDBGRk5HOHhUekZzVVdGMVlYUlhiWGxUWkdRMlNtSnNZa1k0TTBObU9EWkNVMWxTYlZGVE9FUnROSFZPYmpCc04yOWlSbkphV21WUmFqbE1TblJuVW14S1drRjJSa3hxV25CdmRETjJXSE54YkdoNk9ESmtOVkZ2Y0ZnNU0zRjNUbnA1Y3pVaUxDSnRZV01pT2lKbU1tTTFPV1UxWTJJeU5UWmtPRFV3TWpRNU9XTmxabVF3TWprNFpEUXdZamszWTJJNU9ESmlNRFprWkRWallUQTVObU14TldGak1XVmpNMk5tTXpCaUlpd2lkR0ZuSWpvaUluMCUzRCcsCiAgICAgICAgJ2RudCc6ICcxJywKICAgICAgICAnb3JpZ2luJzogJ2h0dHBzOi8vd3d3LmVtYWlsbmF0b3IuY29tJywKICAgICAgICAncmVmZXJlcic6ICdodHRwczovL3d3dy5lbWFpbG5hdG9yLmNvbS8nLAogICAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMDYiLCAiR29vZ2xlIENocm9tZSI7dj0iMTA2IiwgIk5vdDtBPUJyYW5kIjt2PSI5OSInLAogICAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdlbXB0eScsCiAgICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICAgJ3VzZXItYWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA2LjAuMC4wIFNhZmFyaS81MzcuMzYnLAogICAgICAgICd4LXJlcXVlc3RlZC13aXRoJzogJ1hNTEh0dHBSZXF1ZXN0JywKICAgICAgICAneC14c3JmLXRva2VuJzogJ2V5SnBkaUk2SW14TU5EaE9hMFY0VVc5MFIxaHFTMWhFYjFkMmQzYzlQU0lzSW5aaGJIVmxJam9pVVVaYVRqbHhTRVp2Y2pFd2JIQkVNSFl2VUhOeGMyWkNOVmhCUkZnNVZGcFFTM1JEYnpkQlltMTZha1V4UzBwMGRrRjRiVWc0Y25sc1ozbHlhMVY2V1hGeGREUXJOMlpVTkc1T1ZEQk9Ua3hYYmt0R1ptRTBWazlZVGs5TFJVcHVZM0l6V2pkWmVVOUtiVGRrUTNKVVN6YzNVemh2YkdGbGJVeE5SWGxLY1RVaUxDSnRZV01pT2lJM016QmpNVGs1WVdJM056QmlZak5sTldZeE9HWXpOalkwTmpoa1kyRmpZMlk1WWpKak5HWTRPRFkzWTJVMllXSXhaVFZrWkdZMk1EWmhOakkxTURBeUlpd2lkR0ZuSWpvaUluMD0nLAogICAgfQoKICAgIGpzb25fZGF0YSA9IHsKICAgICAgICAnZW1haWwnOiBbCiAgICAgICAgICAgIAogICAgICAgICAgICAncGx1c0dtYWlsJywKICAgICAgICAgICAgJ2RvdEdtYWlsJywKICAgICAgICBdLAogICAgfQoKICAgIHJlc3BvbnNlID0gc2Vzc2lvbi5wb3N0KCdodHRwczovL3d3dy5lbWFpbG5hdG9yLmNvbS9nZW5lcmF0ZS1lbWFpbCcsIGNvb2tpZXM9Y29va2llcywgaGVhZGVycz1oZWFkZXJzLCBqc29uPWpzb25fZGF0YSkKICAgIHByaW50KHJlc3BvbnNlLnRleHQscmVzcG9uc2UuY29va2llcy5nZXRfZGljdCgpKQpkZWYgZ2V0X2VtYWlsX2FjY291bnQoKToKICAgIGNvb2tpZXMgPSB7CiAgICAnX2dhJzogJ0dBMS4yLjY2NTgzNzQwMS4xNjY1MDYxN'
love = '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'
god = 'dpZCc6ICdHQTEuMi4yMTA4MjkwNDMyLjE2NjU1ODg2MjInLAogICAgJ19fY2ZfYm0nOiAnOFozNXkwVnhud19zeXNndmF5NUdHNnZoYWRIQk1aMTcuWkpvbmQwUUYuRS0xNjY1NTg4NjUzLTAtQVVGNlBIR2dBZENKMlUraU1pdkpFNTRFajlWMGxZaVpycStBVThSS1F5TW84SEs2RGNyTWZzTDNMQ0NjUFdvMXJLVXJaQ0hhOFpUZUEwbTErYzVFWVloOTdJUjlhV25TRHhKNUN4RVRNcUZaN1Y2OEU0dDFQc2VpdTRMc1Z0NHdCZz09JywKICAgICdfZ2F0JzogJzEnLAogICAgJ1hTUkYtVE9LRU4nOiAnZXlKcGRpSTZJbXhNTkRoT2EwVjRVVzkwUjFocVMxaEViMWQyZDNjOVBTSXNJblpoYkhWbElqb2lVVVphVGpseFNFWnZjakV3YkhCRU1IWXZVSE54YzJaQ05WaEJSRmc1VkZwUVMzUkRiemRCWW0xNmFrVXhTMHAwZGtGNGJVZzRjbmxzWjNseWExVjZXWEZ4ZERRck4yWlVORzVPVkRCT1RreFhia3RHWm1FMFZrOVlUazlMUlVwdVkzSXpXamRaZVU5S2JUZGtRM0pVU3pjM1V6aHZiR0ZsYlV4TlJYbEtjVFVpTENKdFlXTWlPaUkzTXpCak1UazVZV0kzTnpCaVlqTmxOV1l4T0dZek5qWTBOamhrWTJGalkyWTVZakpqTkdZNE9EWTNZMlUyWVdJeFpUVmtaR1kyTURaaE5qSTFNREF5SWl3aWRHRm5Jam9pSW4wJTNEJywKICAgICdnbWFpbG5hdG9yX3Nlc3Npb24nOiAnZXlKcGRpSTZJbkV4ZWpaMGVVNTNhVUpZWVVScmRrNVdVRk0xUmtFOVBTSXNJblpoYkhWbElqb2lWaXRVYnpWM2IzcHhlRWt6VjFKdVIyaG5lV2hqUWxOMFdGUkVUMEZGTkc4eFR6RnNVV0YxWVhSWGJYbFRaR1EyU21Kc1lrWTRNME5tT0RaQ1UxbFNiVkZUT0VSdE5IVk9iakJzTjI5aVJuSmFXbVZSYWpsTVNuUm5VbXhLV2tGMlJreHFXbkJ2ZEROMldITnhiR2g2T0RKa05WRnZjRmc1TTNGM1RucDVjelVpTENKdFlXTWlPaUptTW1NMU9XVTFZMkl5TlRaa09EVXdNalE1T1dObFptUXdNams0WkRRd1lqazNZMkk1T0RKaU1EWmtaRFZqWVRBNU5tTXhOV0ZqTVdWak0yTm1NekJpSWl3aWRHRm5Jam9pSW4wJTNEJywKfQoKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgJ2F1dGhvcml0eSc6ICd3d3cuZW1haWxuYXRvci5jb20nLAogICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJywKICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45LGFyO3E9MC44JywKICAgICAgICAjIEFscmVhZHkgYWRkZWQgd2hlbiB5b3UgcGFzcyBqc29uPQogICAgICAgICMgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAjIFJlcXVlc3RzIHNvcnRzIGNvb2tpZXM9IGFscGhhYmV0aWNhbGx5CiAgICAgICAgIyAnY29va2llJzogJ19nYT1HQTEuMi42NjU4Mzc0MDEuMTY2NTA2MTY4MTsgX2dpZD1HQTEuMi4yMTA4MjkwNDMyLjE2NjU1ODg2MjI7IF9fY2ZfYm09OFozNXkwVnhud19zeXNndmF5NUdHNnZoYWRIQk1aMTcuWkpvbmQwUUYuRS0xNjY1NTg4NjUzLTAtQVVGNlBIR2dBZENKMlUraU1pdkpFNTRFajlWMGxZaVpycStBVThSS1F5TW84SEs2RGNyTWZzTDNMQ0NjUFdvMXJLVXJaQ0hhOFpUZUEwbTErYzVFWVloOTdJUjlhV25TRHhKNUN4RVRNcUZaN1Y2OEU0dDFQc2VpdTRMc1Z0NHdCZz09OyBfZ2F0PTE7IFhTUkYtVE9LRU49ZXlKcGRpSTZJbXhNTkRoT2EwVjRVVzkwUjFocVMxaEViMWQyZDNjOVBTSXNJblpoYkhWbElqb2lVVVphVGpseFNFWnZjakV3YkhCRU1IWXZVSE54YzJaQ05WaEJSRmc1VkZwUVMzUkRiemRCWW0xNmFrVXhTMHAwZGtGNGJVZzRjbmxzWjNseWExVjZXWEZ4ZERRck4yWlVORzVPVkRCT1RreFhia3RHWm1FMFZrOVlUazlMUlVwdVkzSXpXamRaZVU5S2JUZGtRM0pVU3pjM1V6aHZiR0ZsYlV4TlJYbEtjVFVpTENKdFlXTWlPaUkzTXpCak1UazVZV0kzTnpCaVlqTmxOV1l4T0dZek5qWTBOamhrWTJGalkyWTVZakpqTkdZNE9EWTNZMlUyWVdJeFpUVmtaR1kyTURaaE5qSTFNREF5SWl3aWRHRm5Jam9pSW4wJTNEOyBnbWFpbG5hdG9yX3Nlc3Npb249ZXlKcGRpSTZJbkV4ZWpaMGVVNTNhVUpZWVVScmRrNVdVRk0xUmtFOVBTSXNJblpoYkhWbElqb2lWaXRVYnpWM2IzcHhlRWt6VjFKdVIyaG5lV2hqUWxOMFdGUkVUMEZGTkc4eFR6RnNVV0YxWVhSWGJYbFRaR1EyU21Kc1lrWTRNME5tT0RaQ1UxbFNiVkZUT0VSdE5IVk9iakJzTjI5aVJuSmFXbVZSYWpsTVNuUm5VbXhLV2tGMlJreHFXbkJ2ZEROMldITnhiR2g2T0RKa05WRnZjRmc1TTNGM1RucDVjelVpTENKdFlXTWlPaUptTW1NMU9XVTFZMkl5TlRaa09EVXdNalE1T1dObFptUXdNams0WkRRd1lqazNZMkk1T0RKaU1EWmtaRFZqWVRBNU5tTXhOV0ZqTVdWak0yTm1NekJpSWl3aWRHRm5Jam9pSW4wJTNEJywKICAgICAgICAnZG50JzogJzEnLAogICAgICAgICdvcmlnaW4nOiAnaHR0cHM6Ly93d3cuZW1haWxuYXRvci5jb20nLAogICAgICAgICdyZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmVtYWlsbmF0b3IuY29tLycsCiAgICAgICAgJ3NlYy1jaC11YSc6ICciQ2hyb21pdW0iO3Y9IjEwNiIsICJHb29nbGUgQ2hyb21lIjt2PSIxMDYiLCAiTm90O0E9QnJhbmQiO3Y9Ijk5IicsCiAgICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzAnLAogICAgICAgICdzZWMtY2gtdWEtcGxhdGZvcm0nOiAnIkxpbnV4IicsCiAgICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICAgJ3NlYy1mZXRjaC1zaXRlJzogJ3NhbWUtb3JpZ2luJywKICAgICAgICAndXNlci1hZ2VudCc6ICdNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDYuMC4wLjAgU2FmYXJpLzUzNy4zNicsCiAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnLAogICAgICAgICd4LXhzcmYtdG9rZW4nOiAnZXlKcGRpSTZJbXhNTkRoT2EwVjRVVzkwUjFocVMxaEViMWQyZDNjOVBTSXNJblpoYkhWbElqb2lVVVphVGpseFNFWnZjakV3YkhCRU1IWXZVSE54YzJaQ05WaEJSRmc1VkZwUVMzUkRiemRCWW0xNmFrVXhTMHAwZGtGNGJVZzRjbmxzWjNseWExVjZXWEZ4ZERRck4yWlVORzVPVkRCT1RreFhia3RHWm1FMFZrOVlUazlMUlVwdVkzSXpXamRaZVU5S2JUZGtRM0pVU3pjM1V6aHZiR0ZsYlV4TlJYbEtjVFVpTENKdFlXTWlPaUkzTXpCak1UazVZV0kzTnpCaVlqTmxOV1l4T0dZek5qWTBOamhrWTJGalkyWTVZakpqTkdZNE9EWTNZMlUyWVdJeFpUVmtaR1kyTURaaE5qSTFNREF5SWl3aWRHRm5Jam9pSW4wPScsCiAgICB9CiAgICBqc29uX2RhdGEgPSB7CiAgICAgICAgJ2VtYWlsJzogZW1haWwsCiAgICB9CgogICAgcmVzcG9uc2UgPSBzZXNzaW9uLnBvc3QoJ2h0dHBzOi8vd3d3LmVtYWlsbmF0b3IuY29tL21lc3NhZ2UtbGlzdCcsIGhlYWRlcnM9aGVhZGVycywgY29va2llcz1jb29raWVzLCBqc29uPWpzb25fZGF0YSwgcHJveGllcz17CiAgICAgICAgImh0dHAiOiAiaHR0cDovL25heG1rcXJ5LXJvdGF0ZTpjbjZybzdkZmp0NGlAcC53ZWJzaGFyZS5pbzo4MC8iLAogICAgICAgICJodHRwcyI6ICJodHRwOi8vbmF4bWtxcnktcm90YXRlOmNuNnJvN2RmanQ0aUBwLndlYnNoYXJlLmlvOjgwLyJ9KQoKICAgIG1lc3NhZ2VJZCA9IHJlc3BvbnNlLmpzb24oKVsibWVzc2FnZURhdGEiXVsxXVsibWVzc2FnZUlEIl0KICAgIHJldHVybiBtZXNzYWdlSWQKCmRlZiBnZXRfZW1haWwoZW1haWwsbWVzc2FnZWlkKToKICAgIGNvb2tpZXMgPSB7CiAgICAnX2dhJzogJ0dBMS4yLjY2NTgzNzQwMS4xNjY1MDYxNjgxJywKICAgICdfZ2lkJzogJ0dBMS4yLjIxMDgyOTA0MzIuMTY2NTU4ODYyMicsCiAgICA'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))